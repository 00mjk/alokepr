name: Release

on: [push]

env:
  WASM_BUILD_TOOLCHAIN: nightly-2020-05-14

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Submodules
      run: git submodule update --init --recursive
    - name: Cache Rust dependencies
      uses: actions/cache@v2
      id: cache
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.OS }}-build-${{ env.WASM_BUILD_TOOLCHAIN }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.OS }}-build--${{ env.WASM_BUILD_TOOLCHAIN }}
    - uses: actions-rs/toolchain@v1
      with:
        target: wasm32-unknown-unknown
        toolchain: ${{ env.WASM_BUILD_TOOLCHAIN }}
        default: true
    - id: get-rust-versions
      run: |
        echo "::set-output name=stable::$(rustc +stable --version)"
        echo "::set-output name=nightly::$(rustc +nightly --version)"
    - name: Build
      run: cargo build --release --verbose --all
    - name: Upload moonbase-alphanet node
      uses: actions/upload-artifact@v2
      with:
        name: moonbase-alphanet
        path: target/release/moonbase-alphanet

  generate-specs:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      with:
        name: moonbase-alphanet
    - name: Generate specs
      run: chmod uog+x ./moonbase-alphanet; PARACHAIN_BINARY=./moonbase-alphanet scripts/generate-parachain-specs.sh
    - name: Upload parachain spec plain
      uses: actions/upload-artifact@v2
      with:
        name: moonbase-alphanet-specs-plain.json
        path: build/alphanet/moonbase-alphanet-specs-plain.json
    - name: Upload parachain spec raw
      uses: actions/upload-artifact@v2
      with:
        name: moonbase-alphanet-specs-raw.json
        path: build/alphanet/moonbase-alphanet-specs-raw.json
    - name: Upload parachain wasm
      uses: actions/upload-artifact@v2
      with:
        name: parachain-runtime.wasm
        path: build/alphanet/parachain.wasm
    - name: Upload parachain genesis state
      uses: actions/upload-artifact@v2
      with:
        name: parachain-genesis.txt
        path: build/alphanet/parachain.genesis

  publish-draft-release:
    runs-on: self-hosted
    needs: ['build', 'generate-specs']
    outputs:
      release_url: ${{ steps.create-release.outputs.html_url }}
      asset_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        path: moonbeam
    - name: Generate release text
      env:
        RUSTC_STABLE: ${{ needs.build.outputs.rustc-stable }}
        RUSTC_NIGHTLY: ${{ needs.build.outputs.rustc-nightly }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # gem install changelogerator git toml
        ruby $GITHUB_WORKSPACE/moonbeam/scripts/github/generate_release_text.rb | tee release_text.md
    - name: Create draft release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Moonbeam ${{ github.ref }}
        body_path: ./release_text.md
        draft: true

  publish-runtimes:
    runs-on: ubuntu-latest
    needs: ['publish-draft-release']
    strategy:
      matrix:
        runtime: ['moonbeam']
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.runtime }}-runtime
      - uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.runtime }}
      - name: Set up Ruby 2.7
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.7
      - name: Get runtime version
        id: get-runtime-ver
        run: |
          runtime_ver="$(ruby -e 'require "./scripts/github/lib.rb"; puts get_runtime("${{ matrix.runtime }}")')"
          echo "::set-output name=runtime_ver::$runtime_ver"
      - name: Upload ${{ matrix.runtime }} wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publish-draft-release.outputs.asset_upload_url }}
          asset_path: ./${{ matrix.runtime }}_runtime.compact.wasm
          asset_name: ${{ matrix.runtime }}_runtime-v${{ steps.get-runtime-ver.outputs.runtime_ver }}.compact.wasm
          asset_content_type: application/wasm
      - name: Upload ${{ matrix.runtime }} node
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publish-draft-release.outputs.asset_upload_url }}
          asset_path: ./node-${{ matrix.runtime }}
          asset_name: ${{ matrix.runtime }}
          asset_content_type: application/octet-stream 